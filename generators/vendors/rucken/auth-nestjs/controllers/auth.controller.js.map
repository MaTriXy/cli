{"version":3,"file":"auth.controller.js","sourceRoot":"","sources":["../../../../libs/rucken/auth-nestjs/src/controllers/auth.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Body, Controller, Get, HttpCode, HttpStatus, Inject, Logger, Post, Req } from '@nestjs/common';\nimport { ApiResponse, ApiUseTags } from '@nestjs/swagger';\nimport { CORE_CONFIG_TOKEN, ICoreConfig, OutAccountDto } from '@rucken/core-nestjs';\nimport { plainToClass } from 'class-transformer';\nimport { JsonWebTokenError } from 'jsonwebtoken';\nimport { FacebookSignInDto } from '../dto/facebook-signIn.dto';\nimport { FacebookTokenDto } from '../dto/facebook-token.dto';\nimport { GooglePlusSignInDto } from '../dto/google-plus-signIn.dto';\nimport { RedirectUriDto } from '../dto/redirect-uri.dto';\nimport { SignInDto } from '../dto/sign-in.dto';\nimport { SignUpDto } from '../dto/sign-up.dto';\nimport { TokenDto } from '../dto/token.dto';\nimport { UserTokenDto } from '../dto/user-token.dto';\nimport { IJwtPayload } from '../interfaces/jwt-payload.interface';\nimport { AuthService } from '../services/auth.service';\nimport { TokenService } from '../services/token.service';\n\n@ApiUseTags('auth')\n@Controller('/api/auth')\nexport class AuthController {\n  constructor(\n    @Inject(CORE_CONFIG_TOKEN) private readonly coreConfig: ICoreConfig,\n    private readonly authService: AuthService,\n    private readonly tokenService: TokenService\n  ) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('signin')\n  @ApiResponse({\n    status: HttpStatus.OK,\n    type: UserTokenDto,\n    description: 'API View that checks the veracity of a token, returning the token if it is valid.'\n  })\n  async requestJsonWebTokenAfterSignIn(@Req() req, @Body() signInDto: SignInDto): Promise<UserTokenDto> {\n    const token = await this.tokenService.create(req.user);\n    return plainToClass(UserTokenDto, { user: req.user, token });\n  }\n\n  @HttpCode(HttpStatus.CREATED)\n  @Post('signup')\n  @ApiResponse({\n    status: HttpStatus.OK,\n    type: UserTokenDto,\n    description: `API View that receives a POST with a user's username and password.\n        Returns a JSON Web Token that can be used for authenticated requests.`\n  })\n  async requestJsonWebTokenAfterSignUp(@Req() req, @Body() signUpDto: SignUpDto): Promise<UserTokenDto> {\n    const token = await this.tokenService.create(req.user);\n    return plainToClass(UserTokenDto, { user: req.user, token });\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('info')\n  @ApiResponse({\n    status: HttpStatus.OK,\n    type: UserTokenDto,\n    description: 'API View that checks the veracity of a token, returning the token if it is valid.'\n  })\n  async requestJsonWebTokenAfterInfo(@Req() req, @Body() tokenDto: TokenDto): Promise<UserTokenDto> {\n    try {\n      const validateTokenResult = await this.tokenService.validate(tokenDto.token);\n      if (validateTokenResult) {\n        const jwtPayload: IJwtPayload = await this.tokenService.decode(tokenDto.token);\n        const { user } = await this.authService.info({ id: jwtPayload.id });\n        const token = await this.tokenService.create(user);\n        return plainToClass(UserTokenDto, { user, token });\n      } else {\n        throw new JsonWebTokenError('invalid token');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'facebook/uri'\n  })\n  @Get('facebook/uri')\n  async requestFacebookRedirectUrl(@Req() req): Promise<RedirectUriDto> {\n    // Logger.log(req.get('origin'), AuthController.name + ':requestFacebookRedirectUrl#origin');\n    return this.authService.requestFacebookRedirectUri(\n      req.get('origin') || this.coreConfig.protocol + '://' + req.get('host')\n    );\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'facebook/signin'\n  })\n  @Post('facebook/signin')\n  async facebookSignIn(@Req() req, @Body() facebookSignInDto: FacebookSignInDto): Promise<UserTokenDto> {\n    // Logger.log(req.get('origin'), AuthController.name + ':facebookSignIn#origin');\n    return this.authService.facebookSignIn(\n      facebookSignInDto.code,\n      req.get('origin') || this.coreConfig.protocol + '://' + req.get('host')\n    );\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'facebook/token'\n  })\n  @Post('facebook/token')\n  async requestJsonWebTokenAfterFacebookSignIn(\n    @Req() req,\n    @Body() facebookTokenDto: FacebookTokenDto\n  ): Promise<UserTokenDto> {\n    const token = await this.tokenService.create(req.user);\n    return plainToClass(UserTokenDto, { user: req.user, token });\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'google-plus/uri'\n  })\n  @Get('google-plus/uri')\n  async requestGoogleRedirectUri(@Req() req): Promise<RedirectUriDto> {\n    // Logger.log(req.get('origin'), AuthController.name + ':requestGoogleRedirectUri#origin');\n    return this.authService.requestGoogleRedirectUri(\n      req.get('origin') || this.coreConfig.protocol + '://' + req.get('host')\n    );\n  }\n  @HttpCode(HttpStatus.OK)\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'google-plus/signin'\n  })\n  @Post('google-plus/signin')\n  async googleSignIn(@Req() req, @Body() googleSignInDto: GooglePlusSignInDto): Promise<any> {\n    // Logger.log(req.get('origin'), AuthController.name + ':googleSignIn#origin');\n    return this.authService.googleSignIn(\n      googleSignInDto.code,\n      req.get('origin') || this.coreConfig.protocol + '://' + req.get('host')\n    );\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'google-plus/token'\n  })\n  @Post('google-plus/token')\n  async requestJsonWebTokenAfterGoogleSignIn(@Req() req): Promise<UserTokenDto> {\n    const token = await this.tokenService.create(req.user);\n    return plainToClass(UserTokenDto, { user: req.user, token });\n  }\n}\n"]}