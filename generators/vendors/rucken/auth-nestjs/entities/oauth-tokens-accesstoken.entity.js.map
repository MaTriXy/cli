{"version":3,"file":"oauth-tokens-accesstoken.entity.js","sourceRoot":"","sources":["../../../../libs/rucken/auth-nestjs/src/entities/oauth-tokens-accesstoken.entity.ts"],"names":[],"mappings":"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","sourcesContent":["import { CustomValidationError, User } from '@rucken/core-nestjs';\nimport { IsNotEmpty, IsOptional, MaxLength, validateSync } from 'class-validator';\nimport {\n  BeforeInsert,\n  BeforeUpdate,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn\n} from 'typeorm';\n\n@Entity({ name: 'oauth_tokens_accesstokens' })\nexport class OauthTokensAccesstoken {\n  @PrimaryGeneratedColumn()\n  id: number = undefined;\n\n  @Column({ length: 20 })\n  @IsNotEmpty()\n  @MaxLength(20)\n  provider: string = undefined;\n\n  @Column({ name: 'provider_client_id', length: 200 })\n  @IsNotEmpty()\n  @MaxLength(200)\n  providerClientId: string = undefined;\n\n  @CreateDateColumn({ name: 'granted_at' })\n  grantedAt: Date = undefined;\n\n  @Column({ name: 'access_token', length: 500 })\n  @IsNotEmpty()\n  @MaxLength(500)\n  accessToken: string = undefined;\n\n  @Column({ name: 'refresh_token', length: 200, nullable: true })\n  @MaxLength(200)\n  @IsOptional()\n  refreshToken: string = undefined;\n\n  @Column({ type: Date, name: 'expires_at', nullable: true })\n  expiresAt: Date = undefined;\n\n  @Column({ name: 'token_type', length: 200, nullable: true })\n  @MaxLength(200)\n  @IsOptional()\n  tokenType: string = undefined;\n\n  @Column({ length: 512, nullable: true })\n  @MaxLength(512)\n  @IsOptional()\n  scope: string = undefined;\n\n  @ManyToOne(type => User, { eager: true })\n  @IsNotEmpty()\n  @JoinColumn({ name: 'user_id' })\n  user: User = undefined;\n\n  @BeforeInsert()\n  doBeforeInsertion() {\n    const errors = validateSync(this, { validationError: { target: false } });\n    if (errors.length > 0) {\n      throw new CustomValidationError(errors);\n    }\n  }\n\n  @BeforeUpdate()\n  doBeforeUpdate() {\n    const errors = validateSync(this, { validationError: { target: false } });\n    if (errors.length > 0) {\n      throw new CustomValidationError(errors);\n    }\n  }\n}\n"]}