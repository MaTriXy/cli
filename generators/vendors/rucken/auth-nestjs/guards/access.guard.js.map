{"version":3,"file":"access.guard.js","sourceRoot":"","sources":["../../../../libs/rucken/auth-nestjs/src/guards/access.guard.ts"],"names":[],"mappings":";;;;AAAA,2CAAsE;AACtE,uCAAyC;AACzC,+CAA6C;AAC7C,qDAA2C;AAG3C,IAAa,WAAW,mBAAxB,MAAa,WAAY,SAAQ,oBAAS,CAAC,KAAK,CAAC;IAC/C,YAA6B,SAAoB;QAC/C,KAAK,EAAE,CAAC;QADmB,cAAS,GAAT,SAAS,CAAW;IAEjD,CAAC;IAEK,WAAW,CAAC,OAAyB;;;;;YACzC,IAAI;gBACF,MAAM,OAAM,WAAW,YAAC,OAAO,CAAC,CAAC;aAClC;YAAC,OAAO,KAAK,EAAE;gBACd,eAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,OAAO,EAAE,aAAW,CAAC,IAAI,CAAC,CAAC;aACvE;YACD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAW,OAAO,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAW,aAAa,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;YACtF,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;YACpD,MAAM,IAAI,GAAS,OAAO,CAAC,IAAI,CAAC;YAEhC,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,IAAI,IAAI,YAAY,kBAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACnH,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,YAAY,kBAAI,IAAI,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC9G,OAAO,OAAO,KAAK,IAAI,IAAI,aAAa,KAAK,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,IAAI,aAAa,KAAK,IAAI,CAAC,CAAC;QACpG,CAAC;KAAA;CACF,CAAA;AApBY,WAAW;IADvB,mBAAU,EAAE;6CAE6B,gBAAS;GADtC,WAAW,CAoBvB;AApBY,kCAAW","sourcesContent":["import { ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from '@rucken/core-nestjs';\n\n@Injectable()\nexport class AccessGuard extends AuthGuard('jwt') {\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  async canActivate(context: ExecutionContext) {\n    try {\n      await super.canActivate(context);\n    } catch (error) {\n      Logger.error('Error in canActivate', error.message, AccessGuard.name);\n    }\n    const roles = this.reflector.get<string[]>('roles', context.getHandler());\n    const permissions = this.reflector.get<string[]>('permissions', context.getHandler());\n    const request = context.switchToHttp().getRequest();\n    const user: User = request.user;\n    // Logger.log(JSON.stringify(user), AccessGuard.name);\n    const hasRole = roles ? roles.filter(roleName => user && user instanceof User && user[roleName]).length > 0 : null;\n    const hasPermission = permissions ? user && user instanceof User && user.checkPermissions(permissions) : null;\n    return hasRole === true || hasPermission === true || (hasRole === null && hasPermission === null);\n  }\n}\n"]}