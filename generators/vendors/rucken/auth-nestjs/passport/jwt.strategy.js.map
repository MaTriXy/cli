{"version":3,"file":"jwt.strategy.js","sourceRoot":"","sources":["../../../../libs/rucken/auth-nestjs/src/passport/jwt.strategy.ts"],"names":[],"mappings":";;;AAAA,2CAAwF;AACxF,+CAAoD;AACpD,qDAA0D;AAC1D,yDAAiD;AACjD,+CAAwC;AAExC,6DAAyD;AAGzD,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,2BAAgB,CAAC,uBAAQ,EAAE,KAAK,CAAC;IAChE,YAA6B,YAA0B,EAAmB,aAA4B;QACpG,KAAK,CAAC;YACJ,iBAAiB,EAAE,IAAI;YACvB,cAAc,EAAE,GAAG,CAAC,EAAE;gBACpB,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;gBAE7D,OAAO,KAAK,CAAC;YACf,CAAC;YACD,mBAAmB,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;gBACxC,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,gCAAY,CAAC,kBAAI,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzG,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACxB,CAAC;SACF,CAAC,CAAC;QAZwB,iBAAY,GAAZ,YAAY,CAAc;QAAmB,kBAAa,GAAb,aAAa,CAAe;IAatG,CAAC;IAEY,QAAQ,CAAC,GAAG,EAAE,OAAoB;;YAC7C,IAAI;gBACF,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;aACvC;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,IAAI,4BAAmB,CAAC,sBAAsB,CAAC,CAAC;aACvD;YACD,IAAI;gBAGF,MAAM,IAAI,GAAG,gCAAY,CAAC,kBAAI,EAAE,OAAO,CAAC,CAAC;gBACzC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAEhG,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,IAAI,8BAAqB,EAAE,CAAC;aACnC;QACH,CAAC;KAAA;CACF,CAAA;AAjCY,WAAW;IADvB,mBAAU,EAAE;6CAEgC,4BAAY,EAAkC,2BAAa;GAD3F,WAAW,CAiCvB;AAjCY,kCAAW","sourcesContent":["import { BadRequestException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { GroupsService, User } from '@rucken/core-nestjs';\nimport { plainToClass } from 'class-transformer';\nimport { Strategy } from 'passport-jwt';\nimport { IJwtPayload } from '../interfaces/jwt-payload.interface';\nimport { TokenService } from '../services/token.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private readonly tokenService: TokenService, private readonly groupsService: GroupsService) {\n    super({\n      passReqToCallback: true,\n      jwtFromRequest: req => {\n        const token = this.tokenService.extractTokenFromRequest(req);\n        // Logger.log(token, JwtStrategy.name);\n        return token;\n      },\n      secretOrKeyProvider: (req, token, done) => {\n        const secretKey = this.tokenService.createSecretKey(plainToClass(User, this.tokenService.decode(token)));\n        done(null, secretKey);\n      }\n    });\n  }\n\n  public async validate(req, payload: IJwtPayload) {\n    try {\n      await this.groupsService.preloadAll();\n    } catch (error) {\n      throw new BadRequestException('Error in load groups');\n    }\n    try {\n      // Logger.log(JSON.stringify(payload), JwtStrategy.name);\n      // const { user } = await this.userService.findById({ id: payload.id });\n      const user = plainToClass(User, payload);\n      user.groups = user.groups.map(group => this.groupsService.getGroupByName({ name: group.name }));\n      // Logger.log(JSON.stringify(user), JwtStrategy.name);\n      return user;\n    } catch (error) {\n      throw new UnauthorizedException();\n    }\n  }\n}\n"]}