{"version":3,"file":"1533634559617-AddOauthTokensAccesstokenTable.js","sourceRoot":"","sources":["../../../../libs/rucken/auth-nestjs/src/migrations/1533634559617-AddOauthTokensAccesstokenTable.ts"],"names":[],"mappings":";;;AAAA,qCAA2G;AAE3G,MAAa,2CAA2C;IACzC,EAAE,CAAC,WAAwB;;YACtC,MAAM,WAAW,CAAC,WAAW,CAC3B,IAAI,eAAK,CAAC;gBACR,IAAI,EAAE,2BAA2B;gBACjC,OAAO,EAAE;oBACP;wBACE,IAAI,EAAE,IAAI;wBACV,IAAI,EAAE,SAAS;qBAChB;oBACD;wBACE,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,aAAa;wBACnB,UAAU,EAAE,KAAK;qBAClB;oBACD;wBACE,IAAI,EAAE,oBAAoB;wBAC1B,IAAI,EAAE,cAAc;wBACpB,UAAU,EAAE,KAAK;qBAClB;oBACD;wBACE,IAAI,EAAE,YAAY;wBAClB,IAAI,EAAE,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE;wBACzE,UAAU,EAAE,KAAK;wBACjB,OAAO,EAAE,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,iBAAiB;qBACzE;oBACD;wBACE,IAAI,EAAE,cAAc;wBACpB,IAAI,EAAE,cAAc;wBACpB,UAAU,EAAE,KAAK;qBAClB;oBACD;wBACE,IAAI,EAAE,eAAe;wBACrB,IAAI,EAAE,cAAc;qBACrB;oBACD;wBACE,IAAI,EAAE,YAAY;wBAClB,IAAI,EAAE,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE;wBACzE,UAAU,EAAE,IAAI;qBACjB;oBACD;wBACE,IAAI,EAAE,YAAY;wBAClB,IAAI,EAAE,cAAc;qBACrB;oBACD;wBACE,IAAI,EAAE,OAAO;wBACb,IAAI,EAAE,cAAc;qBACrB;oBACD;wBACE,IAAI,EAAE,SAAS;wBACf,IAAI,EAAE,SAAS;qBAChB;iBACF;aACF,CAAC,EACF,IAAI,CACL,CAAC;YAEF,MAAM,WAAW,CAAC,YAAY,CAC5B,2BAA2B,EAC3B,IAAI,EACJ,IAAI,qBAAW,CAAC;gBACd,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,SAAS;gBACf,SAAS,EAAE,IAAI;gBACf,WAAW,EAAE,IAAI;gBACjB,kBAAkB,EAAE,WAAW;aAChC,CAAC,CACH,CAAC;YAEF,IAAI,CAAE,WAAW,CAAC,UAAU,CAAC,MAAc,CAAC,MAAM,EAAE;gBAClD,MAAM,WAAW,CAAC,gBAAgB,CAChC,2BAA2B,EAC3B,IAAI,yBAAe,CAAC;oBAClB,IAAI,EAAE,iBAAiB;oBACvB,WAAW,EAAE,CAAC,SAAS,CAAC;oBACxB,qBAAqB,EAAE,CAAC,IAAI,CAAC;oBAC7B,mBAAmB,EAAE,OAAO;oBAC5B,QAAQ,EAAE,SAAS;iBACpB,CAAC,CACH,CAAC;gBACF,MAAM,WAAW,CAAC,WAAW,CAC3B,2BAA2B,EAC3B,IAAI,oBAAU,CAAC;oBACb,IAAI,EAAE,kBAAkB;oBACxB,WAAW,EAAE,CAAC,SAAS,CAAC;iBACzB,CAAC,CACH,CAAC;aACH;QACH,CAAC;KAAA;IAEY,IAAI,CAAC,WAAwB;sEAAiB,CAAC;KAAA;CAC7D;AA3FD,kGA2FC","sourcesContent":["import { MigrationInterface, QueryRunner, Table, TableColumn, TableForeignKey, TableIndex } from 'typeorm';\n\nexport class AddOauthTokensAccesstokenTable1533634559617 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<any> {\n    await queryRunner.createTable(\n      new Table({\n        name: 'oauth_tokens_accesstokens',\n        columns: [\n          {\n            name: 'id',\n            type: 'integer'\n          },\n          {\n            name: 'provider',\n            type: 'varchar(20)',\n            isNullable: false\n          },\n          {\n            name: 'provider_client_id',\n            type: 'varchar(200)',\n            isNullable: false\n          },\n          {\n            name: 'granted_at',\n            type: queryRunner.connection.driver.mappedDataTypes.createDate.toString(),\n            isNullable: false,\n            default: queryRunner.connection.driver.mappedDataTypes.createDateDefault\n          },\n          {\n            name: 'access_token',\n            type: 'varchar(500)',\n            isNullable: false\n          },\n          {\n            name: 'refresh_token',\n            type: 'varchar(500)'\n          },\n          {\n            name: 'expires_at',\n            type: queryRunner.connection.driver.mappedDataTypes.createDate.toString(),\n            isNullable: true\n          },\n          {\n            name: 'token_type',\n            type: 'varchar(200)'\n          },\n          {\n            name: 'scope',\n            type: 'varchar(512)'\n          },\n          {\n            name: 'user_id',\n            type: 'integer'\n          }\n        ]\n      }),\n      true\n    );\n\n    await queryRunner.changeColumn(\n      'oauth_tokens_accesstokens',\n      'id',\n      new TableColumn({\n        name: 'id',\n        type: 'integer',\n        isPrimary: true,\n        isGenerated: true,\n        generationStrategy: 'increment'\n      })\n    );\n\n    if (!(queryRunner.connection.driver as any).sqlite) {\n      await queryRunner.createForeignKey(\n        'oauth_tokens_accesstokens',\n        new TableForeignKey({\n          name: 'FK_TOK_ACC_U_ID',\n          columnNames: ['user_id'],\n          referencedColumnNames: ['id'],\n          referencedTableName: 'users',\n          onDelete: 'CASCADE'\n        })\n      );\n      await queryRunner.createIndex(\n        'oauth_tokens_accesstokens',\n        new TableIndex({\n          name: 'IDX_TOK_ACC_U_ID',\n          columnNames: ['user_id']\n        })\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<any> {}\n}\n"]}