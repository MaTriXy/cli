{"version":3,"file":"token.service.js","sourceRoot":"","sources":["../../../../libs/rucken/auth-nestjs/src/services/token.service.ts"],"names":[],"mappings":";;;AAAA,2CAAoD;AAEpD,+CAAoD;AACpD,sDAAyD;AAKzD,IAAa,YAAY,GAAzB,MAAa,YAAY;IACvB,YAAuD,SAAqB;QAArB,cAAS,GAAT,SAAS,CAAY;IAAG,CAAC;IAEhF,MAAM,CAAC,IAAU;QACf,OAAO,mBAAI,CACT;YACE,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBAC9B,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC;YAC9B,CAAC,CAAC;SACH,EACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAC1B;YACE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe;SAC1C,CACF,CAAC;IACJ,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,MAAM,IAAI,GAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACrC,OAAO,qBAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED,MAAM,CAAC,KAAa;QAClB,OAAO,qBAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAgB,CAAC;IAC/D,CAAC;IAED,kBAAkB,CAAC,KAAa;QAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC;YAC9G,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC,KAAK,CAAC;IACZ,CAAC;IAED,uBAAuB,CAAC,OAAO;QAC7B,MAAM,mBAAmB,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACzG,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;QAC3D,OAAO,KAAK,CAAC;IACf,CAAC;IAED,eAAe,CAAC,IAAU;QACxB,OAAO,CACL,IAAI,CAAC,SAAS,CAAC,SAAS;YACxB,CAAC,IAAI;gBACH,CAAC,CAAC,GAAG;oBACH,IAAI,CAAC,EAAE;oBACP,GAAG;oBACH,IAAI,CAAC,OAAO;oBACZ,GAAG;oBACH,IAAI,CAAC,QAAQ;oBACb,GAAG;oBACH,IAAI,CAAC,WAAW;oBAChB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACjE,CAAC,CAAC,EAAE,CAAC,CACR,CAAC;IACJ,CAAC;CACF,CAAA;AA1DY,YAAY;IADxB,mBAAU,EAAE;IAEE,mBAAA,eAAM,CAAC,6BAAgB,CAAC,CAAA;;GAD1B,YAAY,CA0DxB;AA1DY,oCAAY","sourcesContent":["import { Inject, Injectable } from '@nestjs/common';\nimport { User } from '@rucken/core-nestjs';\nimport { decode, sign, verify } from 'jsonwebtoken';\nimport { JWT_CONFIG_TOKEN } from '../configs/jwt.config';\nimport { IJwtConfig } from '../interfaces/jwt-config.interface';\nimport { IJwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class TokenService {\n  constructor(@Inject(JWT_CONFIG_TOKEN) private readonly jwtConfig: IJwtConfig) {}\n\n  create(user: User) {\n    return sign(\n      {\n        id: user.id,\n        isStaff: user.isStaff,\n        isActive: user.isActive,\n        isSuperuser: user.isSuperuser,\n        groups: user.groups.map(group => {\n          return { name: group.name };\n        })\n      },\n      this.createSecretKey(user),\n      {\n        expiresIn: this.jwtConfig.expirationDelta\n      }\n    );\n  }\n\n  validate(token: string) {\n    const data: any = this.decode(token);\n    return verify(this.removeHeaderPrefix(token), this.createSecretKey(data));\n  }\n\n  decode(token: string) {\n    return decode(this.removeHeaderPrefix(token)) as IJwtPayload;\n  }\n\n  removeHeaderPrefix(token: string) {\n    return this.jwtConfig.authHeaderPrefix && token && token.split(this.jwtConfig.authHeaderPrefix + ' ').length > 1\n      ? token.split(this.jwtConfig.authHeaderPrefix + ' ')[1]\n      : token;\n  }\n\n  extractTokenFromRequest(request) {\n    const authorizationHeader = request.headers.authorization ? String(request.headers.authorization) : null;\n    const token = this.removeHeaderPrefix(authorizationHeader);\n    return token;\n  }\n\n  createSecretKey(user: User) {\n    return (\n      this.jwtConfig.secretKey +\n      (user\n        ? '$' +\n          user.id +\n          '$' +\n          user.isStaff +\n          '$' +\n          user.isActive +\n          '$' +\n          user.isSuperuser +\n          (user.groups ? user.groups.map(group => '$' + group.name) : '')\n        : '')\n    );\n  }\n}\n"]}