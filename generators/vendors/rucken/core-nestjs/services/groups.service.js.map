{"version":3,"file":"groups.service.js","sourceRoot":"","sources":["../../../../libs/rucken/core-nestjs/src/services/groups.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { plainToClass } from 'class-transformer';\nimport { Repository } from 'typeorm';\nimport { Group } from '../entities/group.entity';\n\n@Injectable()\nexport class GroupsService {\n  items: Group[];\n\n  constructor(@InjectRepository(Group) private readonly repository: Repository<Group>) {}\n  async create(options: { item: Group }) {\n    try {\n      options.item = await this.repository.save(options.item);\n      return { group: options.item };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async update(options: { id: number; item: Group }) {\n    options.item.id = options.id;\n    try {\n      options.item = await this.repository.save(options.item);\n      return { group: options.item };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async delete(options: { id: number }) {\n    try {\n      let item = await this.repository.findOneOrFail(options.id);\n      item.permissions = [];\n      item = await this.repository.save(item);\n      await this.repository.delete(options.id);\n      return { group: null };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async findById(options: { id: number }) {\n    try {\n      const item = await this.repository.findOneOrFail(options.id, {\n        relations: ['permissions']\n      });\n      return { group: item };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async findAll(options: { curPage: number; perPage: number; q?: string; sort?: string }) {\n    try {\n      let objects: [Group[], number];\n      let qb = this.repository.createQueryBuilder('group');\n      qb = qb.leftJoinAndSelect('group.permissions', 'permission');\n      qb = qb.leftJoinAndSelect('permission.contentType', 'contentType');\n      if (options.q) {\n        qb = qb.where('group.title like :q or group.name like :q or group.id = :id', {\n          q: `%${options.q}%`,\n          id: +options.q\n        });\n      }\n      options.sort = options.sort && new Group().hasOwnProperty(options.sort.replace('-', '')) ? options.sort : '-id';\n      const field = options.sort.replace('-', '');\n      if (options.sort) {\n        if (options.sort[0] === '-') {\n          qb = qb.orderBy('group.' + field, 'DESC');\n        } else {\n          qb = qb.orderBy('group.' + field, 'ASC');\n        }\n      }\n      qb = qb.skip((options.curPage - 1) * options.perPage).take(options.perPage);\n      objects = await qb.getManyAndCount();\n      return {\n        groups: objects[0],\n        meta: {\n          perPage: options.perPage,\n          totalPages: options.perPage > objects[1] ? 1 : Math.ceil(objects[1] / options.perPage),\n          totalResults: objects[1],\n          curPage: options.curPage\n        }\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  getGroupByName(options: { name: string }) {\n    const groups = (this.items ? this.items : []).filter(group => group.name === options.name);\n    if (groups.length) {\n      return groups[0];\n    }\n    throw new NotFoundException(`Group with name \"${options.name}\" not exists`);\n  }\n\n  async preloadAll() {\n    if (!this.items) {\n      try {\n        const groups = await this.repository\n          .createQueryBuilder('group')\n          .leftJoinAndSelect('group.permissions', 'permission')\n          .getMany();\n        this.items = plainToClass(Group, groups);\n        // Logger.log(JSON.stringify(groups.map(group => group.name)), GroupsService.name);\n      } catch (error) {\n        throw error;\n      }\n    }\n  }\n}\n"]}