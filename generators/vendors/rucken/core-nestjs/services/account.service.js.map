{"version":3,"file":"account.service.js","sourceRoot":"","sources":["../../../../libs/rucken/core-nestjs/src/services/account.service.ts"],"names":[],"mappings":";;;AAAA,2CAA4C;AAC5C,yDAA0D;AAE1D,mDAA+C;AAG/C,IAAa,cAAc,GAA3B,MAAa,cAAc;IACzB,YAA6B,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAErD,MAAM,CAAC,OAAmC;;YAC9C,IAAI;gBACF,MAAM,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC;oBAC7C,EAAE,EAAE,OAAO,CAAC,EAAE;oBACd,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;oBACzB,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,QAAQ;iBAChC,CAAC,CAAC;gBACH,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACzD,IAAI,GAAG,yCAAqB,CAAC,IAAI,EAAE;oBACjC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;oBACzB,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,QAAQ;oBAC/B,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,QAAQ;oBAC/B,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,SAAS;oBACjC,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,QAAQ;iBAChC,CAAC,CAAC;gBACH,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC9C,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;aACvE;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC;KAAA;CACF,CAAA;AAxBY,cAAc;IAD1B,mBAAU,EAAE;6CAEgC,4BAAY;GAD5C,cAAc,CAwB1B;AAxBY,wCAAc","sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { plainToClassFromExist } from 'class-transformer';\nimport { User } from '../entities/user.entity';\nimport { UsersService } from './users.service';\n\n@Injectable()\nexport class AccountService {\n  constructor(private readonly usersService: UsersService) {}\n\n  async update(options: { id: number; user: User }) {\n    try {\n      await this.usersService.assertUsernameAndEmail({\n        id: options.id,\n        email: options.user.email,\n        username: options.user.username\n      });\n      let { user } = await this.usersService.findById(options);\n      user = plainToClassFromExist(user, {\n        email: options.user.email,\n        password: options.user.password,\n        username: options.user.username,\n        firstName: options.user.firstName,\n        lastName: options.user.lastName\n      });\n      await user.setPassword(options.user.password);\n      return await this.usersService.update({ id: options.id, item: user });\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n"]}