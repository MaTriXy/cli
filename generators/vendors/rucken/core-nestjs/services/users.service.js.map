{"version":3,"file":"users.service.js","sourceRoot":"","sources":["../../../../libs/rucken/core-nestjs/src/services/users.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../entities/user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectRepository(User) private readonly repository: Repository<User>) {}\n\n  async assertUsernameAndEmail(options: { id?: number; email: string; username: string }) {\n    if (options.email) {\n      let userOfEmail: { user };\n      try {\n        userOfEmail = await this.findByEmail(options);\n      } catch (error) {\n        userOfEmail = undefined;\n      }\n      if (userOfEmail && userOfEmail.user.id !== options.id) {\n        throw new ConflictException(`User with email \"${options.email}\" is exists`);\n      }\n    }\n    if (options.username) {\n      let userOfUsername: { user };\n      try {\n        userOfUsername = await this.findByUserName(options);\n      } catch (error) {\n        userOfUsername = undefined;\n      }\n      if (userOfUsername && userOfUsername.user.id !== options.id) {\n        throw new ConflictException(`User with username \"${options.username}\" is exists`);\n      }\n    }\n  }\n\n  async create(options: { item: User }) {\n    try {\n      await this.assertUsernameAndEmail({\n        id: options.item.id,\n        email: options.item.email,\n        username: options.item.username\n      });\n      options.item = await this.repository.save(options.item);\n      const { user } = await this.findById({ id: options.item.id });\n      return { user };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async update(options: { id: number; item: User }) {\n    try {\n      await this.assertUsernameAndEmail({\n        id: options.item.id,\n        email: options.item.email,\n        username: options.item.username\n      });\n      options.item.lastLogin = new Date();\n      options.item.id = options.id;\n      options.item = await this.repository.save(options.item);\n      const { user } = await this.findById({ id: options.item.id });\n      return { user };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async delete(options: { id: number }) {\n    try {\n      let object = await this.repository.findOneOrFail(options.id);\n      object.groups = [];\n      object = await this.repository.save(object);\n      await this.repository.delete(options.id);\n      return { user: null };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async findById(options: { id: number }) {\n    try {\n      const item = await this.repository.findOneOrFail(options.id, {\n        relations: ['groups', 'groups.permissions']\n      });\n      return { user: item };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async findAll(options: { curPage: number; perPage: number; q?: string; group?: number; sort?: string }) {\n    try {\n      let objects: [User[], number];\n      let qb = this.repository.createQueryBuilder('user');\n      if (options.group) {\n        qb = qb.leftJoinAndSelect('user.groups', 'group').where('group.id = :group', { group: options.group });\n      } else {\n        qb = qb.leftJoinAndSelect('user.groups', 'group');\n        qb = qb.leftJoinAndSelect('group.permissions', 'permission');\n        qb = qb.leftJoinAndSelect('permission.contentType', 'contentType');\n      }\n      if (options.q) {\n        qb = qb.where('user.first_name like :q or user.last_name like :q or user.username like :q or user.id = :id', {\n          q: `%${options.q}%`,\n          id: +options.q\n        });\n      }\n      options.sort = options.sort && new User().hasOwnProperty(options.sort.replace('-', '')) ? options.sort : '-id';\n      const field = options.sort.replace('-', '');\n      if (options.sort) {\n        if (options.sort[0] === '-') {\n          qb = qb.orderBy('user.' + field, 'DESC');\n        } else {\n          qb = qb.orderBy('user.' + field, 'ASC');\n        }\n      }\n      qb = qb.skip((options.curPage - 1) * options.perPage).take(options.perPage);\n      objects = await qb.getManyAndCount();\n      return {\n        users: objects[0],\n        meta: {\n          perPage: options.perPage,\n          totalPages: options.perPage > objects[1] ? 1 : Math.ceil(objects[1] / options.perPage),\n          totalResults: objects[1],\n          curPage: options.curPage\n        }\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async findByEmail(options: { email: string }) {\n    try {\n      const item = await this.repository.findOneOrFail({\n        where: {\n          email: options.email\n        },\n        relations: ['groups', 'groups.permissions']\n      });\n      return {\n        user: item\n      };\n    } catch (error) {\n      throw new NotFoundException(`User with email \"${options.email}\" not founded`);\n    }\n  }\n\n  async findByUserName(options: { username: string }) {\n    try {\n      const item = await this.repository.findOneOrFail({\n        where: {\n          username: options.username\n        },\n        relations: ['groups', 'groups.permissions']\n      });\n      return {\n        user: item\n      };\n    } catch (error) {\n      throw new NotFoundException(`User with username \"${options.username}\" not founded`);\n    }\n  }\n}\n"]}