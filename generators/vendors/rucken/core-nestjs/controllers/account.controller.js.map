{"version":3,"file":"account.controller.js","sourceRoot":"","sources":["../../../../libs/rucken/core-nestjs/src/controllers/account.controller.ts"],"names":[],"mappings":";;;AAAA,2CAAsH;AACtH,6CAAyE;AACzE,yDAAiD;AACjD,wDAA2D;AAC3D,+EAAkE;AAClE,mEAAsD;AACtD,0DAAqD;AACrD,4DAAuD;AACvD,yDAA+C;AAE/C,iEAA6D;AAI7D,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAC5B,YAC8C,UAAuB,EAC3D,cAA8B;QADM,eAAU,GAAV,UAAU,CAAa;QAC3D,mBAAc,GAAd,cAAc,CAAgB;IACrC,CAAC;IAYE,MAAM,CAAQ,GAAG,EAAU,UAAwB;;YACvD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;gBACxB,MAAM,IAAI,kCAAyB,CAAC,0BAA0B,CAAC,CAAC;aACjE;YACD,IAAI;gBACF,OAAO,gCAAY,CACjB,+BAAa,EACb,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;oBAC/B,EAAE,EAAE,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE;oBAC3B,IAAI,EAAE,gCAAY,CAAC,kBAAI,EAAE,UAAU,CAAC;iBACrC,CAAC,CACH,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC;KAAA;CACF,CAAA;AAhBC;IAVC,uBAAa,EAAE;IACf,uBAAK,CAAC,UAAU,CAAC;IACjB,mCAAW,CAAC,gBAAgB,CAAC;IAC7B,iBAAQ,CAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,aAAI,CAAC,SAAS,CAAC;IACf,qBAAW,CAAC;QACX,MAAM,EAAE,mBAAU,CAAC,EAAE;QACrB,IAAI,EAAE,+BAAa;QACnB,WAAW,EAAE,EAAE;KAChB,CAAC;IACY,mBAAA,YAAG,EAAE,CAAA,EAAO,mBAAA,aAAI,EAAE,CAAA;;qDAAa,6BAAY;;+CAexD;AA/BU,iBAAiB;IAF7B,oBAAU,CAAC,SAAS,CAAC;IACrB,mBAAU,CAAC,cAAc,CAAC;IAGtB,mBAAA,eAAM,CAAC,+BAAiB,CAAC,CAAA;qDACF,gCAAc;GAH7B,iBAAiB,CAgC7B;AAhCY,8CAAiB","sourcesContent":["import { Body, Controller, HttpCode, HttpStatus, Inject, MethodNotAllowedException, Post, Req } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiUseTags } from '@nestjs/swagger';\nimport { plainToClass } from 'class-transformer';\nimport { CORE_CONFIG_TOKEN } from '../configs/core.config';\nimport { Permissions } from '../decorators/permissions.decorator';\nimport { Roles } from '../decorators/roles.decorator';\nimport { InAccountDto } from '../dto/in-account.dto';\nimport { OutAccountDto } from '../dto/out-account.dto';\nimport { User } from '../entities/user.entity';\nimport { ICoreConfig } from '../interfaces/core-config.interface';\nimport { AccountService } from '../services/account.service';\n\n@ApiUseTags('account')\n@Controller('/api/account')\nexport class AccountController {\n  constructor(\n    @Inject(CORE_CONFIG_TOKEN) private readonly coreConfig: ICoreConfig,\n    private accountService: AccountService\n  ) {}\n\n  @ApiBearerAuth()\n  @Roles('isActive')\n  @Permissions('change_profile')\n  @HttpCode(HttpStatus.OK)\n  @Post('/update')\n  @ApiResponse({\n    status: HttpStatus.OK,\n    type: OutAccountDto,\n    description: ''\n  })\n  async update(@Req() req, @Body() accountDto: InAccountDto) {\n    if (this.coreConfig.demo) {\n      throw new MethodNotAllowedException('Not allowed in DEMO mode');\n    }\n    try {\n      return plainToClass(\n        OutAccountDto,\n        await this.accountService.update({\n          id: req.user && req.user.id,\n          user: plainToClass(User, accountDto)\n        })\n      );\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n"]}