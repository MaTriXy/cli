{"version":3,"file":"1524199022084-FillData.js","sourceRoot":"","sources":["../../../../libs/rucken/core-nestjs/src/migrations/1524199022084-FillData.ts"],"names":[],"mappings":"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","sourcesContent":["import { plainToClass } from 'class-transformer';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport { ContentType1524199022084 } from '../migrations_entities/1524199022084/content-type.entity';\nimport { Group1524199022084 } from '../migrations_entities/1524199022084/group.entity';\nimport { Permission1524199022084 } from '../migrations_entities/1524199022084/permission.entity';\nimport { User1524199022084 } from '../migrations_entities/1524199022084/user.entity';\n\nexport class FillData1524199022084 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<any> {\n    const ctPermission = await queryRunner.manager\n      .getRepository<ContentType1524199022084>(ContentType1524199022084)\n      .save(plainToClass(ContentType1524199022084, { name: 'permission', title: 'Permission' }));\n    const ctGroup = await queryRunner.manager\n      .getRepository<ContentType1524199022084>(ContentType1524199022084)\n      .save(plainToClass(ContentType1524199022084, { name: 'group', title: 'Group' }));\n    const ctContentTtype = await queryRunner.manager\n      .getRepository<ContentType1524199022084>(ContentType1524199022084)\n      .save(\n        plainToClass(ContentType1524199022084, {\n          name: 'content-type',\n          title: 'Content type'\n        })\n      );\n    const ctUser = await queryRunner.manager\n      .getRepository<ContentType1524199022084>(ContentType1524199022084)\n      .save(plainToClass(ContentType1524199022084, { name: 'user', title: 'User' }));\n    const pPermissions = await queryRunner.manager.getRepository<Permission1524199022084>(Permission1524199022084).save(\n      plainToClass(Permission1524199022084, [\n        {\n          title: 'Can add permission',\n          name: 'add_permission',\n          contentType: ctPermission\n        },\n        {\n          title: 'Can change permission',\n          name: 'change_permission',\n          contentType: ctPermission\n        },\n        {\n          title: 'Can delete permission',\n          name: 'delete_permission',\n          contentType: ctPermission\n        },\n        {\n          title: 'Can add group',\n          name: 'add_group',\n          contentType: ctGroup\n        },\n        {\n          title: 'Can change group',\n          name: 'change_group',\n          contentType: ctGroup\n        },\n        {\n          title: 'Can delete group',\n          name: 'delete_group',\n          contentType: ctGroup\n        },\n        {\n          title: 'Can add content type',\n          name: 'add_content-type',\n          contentType: ctContentTtype\n        },\n        {\n          title: 'Can change content type',\n          name: 'change_content-type',\n          contentType: ctContentTtype\n        },\n        {\n          title: 'Can delete content type',\n          name: 'delete_content-type',\n          contentType: ctContentTtype\n        },\n        {\n          title: 'Can add user',\n          name: 'add_user',\n          contentType: ctUser\n        },\n        {\n          title: 'Can change user',\n          name: 'change_user',\n          contentType: ctUser\n        },\n        {\n          title: 'Can delete user',\n          name: 'delete_user',\n          contentType: ctUser\n        },\n        {\n          title: 'Can read user',\n          name: 'read_user',\n          contentType: ctUser\n        },\n        {\n          title: 'Can read group',\n          name: 'read_group',\n          contentType: ctGroup\n        },\n        {\n          title: 'Can read permission',\n          name: 'read_permission',\n          contentType: ctPermission\n        },\n        {\n          title: 'Can read content type',\n          name: 'read_content-type',\n          contentType: ctContentTtype\n        },\n        {\n          title: 'Can change profile',\n          name: 'change_profile',\n          contentType: ctUser\n        }\n      ])\n    );\n    const gUser = await queryRunner.manager.getRepository<Group1524199022084>(Group1524199022084).save(\n      plainToClass(Group1524199022084, {\n        name: 'user',\n        title: 'User',\n        permissions: pPermissions.filter(item => item.name === 'change_profile')\n      })\n    );\n    const gAdmin = await queryRunner.manager.getRepository<Group1524199022084>(Group1524199022084).save(\n      plainToClass(Group1524199022084, {\n        name: 'admin',\n        title: 'Admin',\n        permissions: pPermissions\n      })\n    );\n    const tempUser = new User1524199022084();\n    const uUsers = await queryRunner.manager.getRepository<User1524199022084>(User1524199022084).save(\n      plainToClass(User1524199022084, [\n        {\n          username: 'admin',\n          email: 'admin@admin.com',\n          password: await tempUser.createPassword('12345678'),\n          firstName: 'AdminFirstName',\n          lastName: 'AdminLastName',\n          isSuperuser: false,\n          isStaff: false,\n          isActive: true,\n          groups: [gAdmin]\n        },\n        {\n          username: 'user1',\n          email: 'user1@user1.com',\n          password: await tempUser.createPassword('12345678'),\n          firstName: 'User1FirstName',\n          lastName: 'User1LastName',\n          isSuperuser: false,\n          isStaff: false,\n          isActive: true,\n          groups: [gUser]\n        },\n        {\n          username: 'user2',\n          email: 'user2@user2.com',\n          password: await tempUser.createPassword('12345678'),\n          firstName: 'User2FirstName',\n          lastName: 'User2LastName',\n          isSuperuser: false,\n          isStaff: false,\n          isActive: true,\n          groups: [gUser]\n        }\n      ])\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<any> {}\n}\n"]}