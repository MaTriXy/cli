{"version":3,"file":"user.entity.js","sourceRoot":"","sources":["../../../../../libs/rucken/core-nestjs/src/migrations_entities/1524199022084/user.entity.ts"],"names":[],"mappings":"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","sourcesContent":["import { IsEmail, IsNotEmpty, IsOptional, MaxLength, validateSync } from 'class-validator';\nimport * as hashers from 'node-django-hashers';\nimport {\n  BeforeInsert,\n  BeforeUpdate,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn\n} from 'typeorm';\nimport { CustomValidationError } from '../../exceptions/custom-validation.error';\nimport { Group1524199022084 } from './group.entity';\n\n@Entity({ name: 'users' })\nexport class User1524199022084 {\n  @PrimaryGeneratedColumn()\n  id: number = undefined;\n\n  @Column({ length: 128 })\n  @MaxLength(128)\n  @IsOptional()\n  password: string = undefined;\n\n  @UpdateDateColumn({ name: 'last_login', nullable: true })\n  lastLogin: Date = undefined;\n\n  @Column({ name: 'is_superuser', default: false })\n  isSuperuser: boolean = undefined;\n\n  @Column({ length: 150, unique: true })\n  @MaxLength(150)\n  username: string = undefined;\n\n  @Column({ name: 'first_name', length: 30, nullable: true })\n  @MaxLength(30)\n  @IsOptional()\n  firstName: string = undefined;\n\n  @Column({ name: 'last_name', length: 30, nullable: true })\n  @MaxLength(30)\n  @IsOptional()\n  lastName: string = undefined;\n\n  @Column({ length: 254, unique: true })\n  @IsNotEmpty()\n  @IsEmail()\n  @MaxLength(254)\n  email: string = undefined;\n\n  @Column({ name: 'is_staff', default: false })\n  isStaff: boolean = undefined;\n\n  @Column({ name: 'is_active', default: false })\n  isActive: boolean = undefined;\n\n  @CreateDateColumn({ name: 'date_joined' })\n  dateJoined: Date = undefined;\n\n  @Column({ type: Date, name: 'date_of_birth', nullable: true })\n  dateOfBirth: Date = undefined;\n\n  @ManyToMany(type => Group1524199022084)\n  @JoinTable({\n    // not work on run cli migration:\n    name: 'user_groups',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id'\n    },\n    inverseJoinColumn: {\n      name: 'group_id',\n      referencedColumnName: 'id'\n    }\n  })\n  groups: Group1524199022084[];\n\n  @BeforeInsert()\n  doBeforeInsertion() {\n    const errors = validateSync(this, { validationError: { target: false } });\n    if (errors.length > 0) {\n      throw new CustomValidationError(errors);\n    }\n  }\n\n  @BeforeUpdate()\n  doBeforeUpdate() {\n    const errors = validateSync(this, { validationError: { target: false } });\n    if (errors.length > 0) {\n      throw new CustomValidationError(errors);\n    }\n  }\n\n  async createPassword(password: string) {\n    const h = new hashers.PBKDF2PasswordHasher();\n    const hash = await h.encode(password, h.salt());\n    return hash;\n  }\n\n  async validatePassword(password: string) {\n    const h = new hashers.PBKDF2PasswordHasher();\n    return h.verify(password, this.password);\n  }\n\n  async setPassword(password: string) {\n    if (password) {\n      this.password = await this.createPassword(password);\n    }\n    return this;\n  }\n\n  checkPermissions(permissions: string[]) {\n    permissions = permissions.map(permission => permission.toLowerCase());\n    return (\n      this.groups.filter(\n        group =>\n          group &&\n          group.permissions.filter(permission => permissions.indexOf(permission.name.toLowerCase()) !== -1).length > 0\n      ).length > 0\n    );\n  }\n}\n"]}