{"version":3,"file":"group.entity.js","sourceRoot":"","sources":["../../../../libs/rucken/core-nestjs/src/entities/group.entity.ts"],"names":[],"mappings":";;;AAAA,qDAAsE;AACtE,qCAAoH;AACpH,qEAA2D;AAC3D,yDAA+C;AAC/C,mFAA8E;AAG9E,IAAa,KAAK,GAAlB,MAAa,KAAK;IADlB;QAGE,OAAE,GAAW,SAAS,CAAC;QAKvB,SAAI,GAAW,SAAS,CAAC;QAKzB,UAAK,GAAW,SAAS,CAAC;IAiD5B,CAAC;IAdC,iBAAiB;QACf,MAAM,MAAM,GAAG,8BAAY,CAAC,IAAI,EAAE,EAAE,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAC1E,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAI,+CAAqB,CAAC,MAAM,CAAC,CAAC;SACzC;IACH,CAAC;IAGD,cAAc;QACZ,MAAM,MAAM,GAAG,8BAAY,CAAC,IAAI,EAAE,EAAE,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAC1E,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAI,+CAAqB,CAAC,MAAM,CAAC,CAAC;SACzC;IACH,CAAC;CACF,CAAA;AA3DC;IADC,gCAAsB,EAAE;;iCACF;AAKvB;IAHC,gBAAM,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IACrC,4BAAU,EAAE;IACZ,2BAAS,CAAC,GAAG,CAAC;;mCACU;AAKzB;IAHC,gBAAM,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IACrC,4BAAU,EAAE;IACZ,2BAAS,CAAC,GAAG,CAAC;;oCACW;AAiB1B;IAfC,oBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,8BAAU,EAAE;QAC9B,OAAO,EAAE,CAAC,QAAQ,CAAC;KACpB,CAAC;IACD,mBAAS,CAAC;QAET,IAAI,EAAE,mBAAmB;QACzB,UAAU,EAAE;YACV,IAAI,EAAE,UAAU;YAChB,oBAAoB,EAAE,IAAI;SAC3B;QACD,iBAAiB,EAAE;YACjB,IAAI,EAAE,eAAe;YACrB,oBAAoB,EAAE,IAAI;SAC3B;KACF,CAAC;;0CACwB;AAe1B;IAbC,oBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,kBAAI,CAAC;IACxB,mBAAS,CAAC;QAET,IAAI,EAAE,aAAa;QACnB,UAAU,EAAE;YACV,IAAI,EAAE,UAAU;YAChB,oBAAoB,EAAE,IAAI;SAC3B;QACD,iBAAiB,EAAE;YACjB,IAAI,EAAE,SAAS;YACf,oBAAoB,EAAE,IAAI;SAC3B;KACF,CAAC;;oCACY;AAGd;IADC,sBAAY,EAAE;;;;8CAMd;AAGD;IADC,sBAAY,EAAE;;;;2CAMd;AA5DU,KAAK;IADjB,gBAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;GACd,KAAK,CA6DjB;AA7DY,sBAAK","sourcesContent":["import { IsNotEmpty, MaxLength, validateSync } from 'class-validator';\nimport { BeforeInsert, BeforeUpdate, Column, Entity, JoinTable, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Permission } from '../entities/permission.entity';\nimport { User } from '../entities/user.entity';\nimport { CustomValidationError } from '../exceptions/custom-validation.error';\n\n@Entity({ name: 'groups' })\nexport class Group {\n  @PrimaryGeneratedColumn()\n  id: number = undefined;\n\n  @Column({ length: 100, unique: true })\n  @IsNotEmpty()\n  @MaxLength(100)\n  name: string = undefined;\n\n  @Column({ length: 255, unique: true })\n  @IsNotEmpty()\n  @MaxLength(255)\n  title: string = undefined;\n\n  @ManyToMany(type => Permission, {\n    cascade: ['remove']\n  })\n  @JoinTable({\n    // not work on run cli migration:\n    name: 'group_permissions',\n    joinColumn: {\n      name: 'group_id',\n      referencedColumnName: 'id'\n    },\n    inverseJoinColumn: {\n      name: 'permission_id',\n      referencedColumnName: 'id'\n    }\n  })\n  permissions: Permission[];\n\n  @ManyToMany(type => User)\n  @JoinTable({\n    // not work on run cli migration:\n    name: 'user_groups',\n    joinColumn: {\n      name: 'group_id',\n      referencedColumnName: 'id'\n    },\n    inverseJoinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id'\n    }\n  })\n  users: User[];\n\n  @BeforeInsert()\n  doBeforeInsertion() {\n    const errors = validateSync(this, { validationError: { target: false } });\n    if (errors.length > 0) {\n      throw new CustomValidationError(errors);\n    }\n  }\n\n  @BeforeUpdate()\n  doBeforeUpdate() {\n    const errors = validateSync(this, { validationError: { target: false } });\n    if (errors.length > 0) {\n      throw new CustomValidationError(errors);\n    }\n  }\n}\n"]}