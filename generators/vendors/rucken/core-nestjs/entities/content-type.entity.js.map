{"version":3,"file":"content-type.entity.js","sourceRoot":"","sources":["../../../../libs/rucken/core-nestjs/src/entities/content-type.entity.ts"],"names":[],"mappings":";;;AAAA,qDAAsE;AACtE,qCAAwG;AACxG,qEAA2D;AAC3D,mFAA8E;AAG9E,IAAa,WAAW,GAAxB,MAAa,WAAW;IADxB;QAGE,OAAE,GAAW,SAAS,CAAC;QAKvB,SAAI,GAAW,SAAS,CAAC;QAKzB,UAAK,GAAW,SAAS,CAAC;IAoB5B,CAAC;IAdC,iBAAiB;QACf,MAAM,MAAM,GAAG,8BAAY,CAAC,IAAI,EAAE,EAAE,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAC1E,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAI,+CAAqB,CAAC,MAAM,CAAC,CAAC;SACzC;IACH,CAAC;IAGD,cAAc;QACZ,MAAM,MAAM,GAAG,8BAAY,CAAC,IAAI,EAAE,EAAE,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAC1E,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAI,+CAAqB,CAAC,MAAM,CAAC,CAAC;SACzC;IACH,CAAC;CACF,CAAA;AA9BC;IADC,gCAAsB,EAAE;;uCACF;AAKvB;IAHC,gBAAM,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;IACvB,4BAAU,EAAE;IACZ,2BAAS,CAAC,GAAG,CAAC;;yCACU;AAKzB;IAHC,gBAAM,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;IACvB,4BAAU,EAAE;IACZ,2BAAS,CAAC,GAAG,CAAC;;0CACW;AAG1B;IADC,mBAAS,CAAC,IAAI,CAAC,EAAE,CAAC,8BAAU,EAAE,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;;gDAC1C;AAG1B;IADC,sBAAY,EAAE;;;;oDAMd;AAGD;IADC,sBAAY,EAAE;;;;iDAMd;AA/BU,WAAW;IADvB,gBAAM,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC;GACrB,WAAW,CAgCvB;AAhCY,kCAAW","sourcesContent":["import { IsNotEmpty, MaxLength, validateSync } from 'class-validator';\nimport { BeforeInsert, BeforeUpdate, Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Permission } from '../entities/permission.entity';\nimport { CustomValidationError } from '../exceptions/custom-validation.error';\n\n@Entity({ name: 'content_types' })\nexport class ContentType {\n  @PrimaryGeneratedColumn()\n  id: number = undefined;\n\n  @Column({ length: 100 })\n  @IsNotEmpty()\n  @MaxLength(100)\n  name: string = undefined;\n\n  @Column({ length: 255 })\n  @IsNotEmpty()\n  @MaxLength(255)\n  title: string = undefined;\n\n  @OneToMany(type => Permission, permission => permission.contentType)\n  permissions: Permission[];\n\n  @BeforeInsert()\n  doBeforeInsertion() {\n    const errors = validateSync(this, { validationError: { target: false } });\n    if (errors.length > 0) {\n      throw new CustomValidationError(errors);\n    }\n  }\n\n  @BeforeUpdate()\n  doBeforeUpdate() {\n    const errors = validateSync(this, { validationError: { target: false } });\n    if (errors.length > 0) {\n      throw new CustomValidationError(errors);\n    }\n  }\n}\n"]}